--- a/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
+++ b/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
@@ -250,19 +250,18 @@ static int ag71xx_ring_rx_init(struct ag
 	int ring_size = BIT(ring->order);
 	int ring_mask = BIT(ring->order) - 1;
 	unsigned int i;
-	int ret;
+	int ret = 0;
 	int offset = ag71xx_buffer_offset(ag);
 
-	ret = 0;
 	for (i = 0; i < ring_size; i++) {
 		struct ag71xx_desc *desc = ag71xx_ring_desc(ring, i);
 
 		desc->next = (u32) (ring->descs_dma +
 			AG71XX_DESC_SIZE * ((i + 1) & ring_mask));
 
-		DBG("ag71xx: RX desc at %p, next is %08x\n",
+/*		DBG("ag71xx: RX desc at %p, next is %08x\n",
 			desc, desc->next);
-	}
+*/	}
 
 	for (i = 0; i < ring_size; i++) {
 		struct ag71xx_desc *desc = ag71xx_ring_desc(ring, i);
@@ -289,10 +288,9 @@ static int ag71xx_ring_rx_refill(struct
 {
 	struct ag71xx_ring *ring = &ag->rx_ring;
 	int ring_mask = BIT(ring->order) - 1;
-	unsigned int count;
+	unsigned int count = 0;
 	int offset = ag71xx_buffer_offset(ag);
 
-	count = 0;
 	for (; ring->curr - ring->dirty > 0; ring->dirty++) {
 		struct ag71xx_desc *desc;
 		unsigned int i;
@@ -297,7 +295,7 @@ static int ag71xx_ring_rx_refill(struct
 	/* flush descriptors */
 	wmb();
 
-	DBG("%s: %u rx descriptors refilled\n", ag->dev->name, count);
+//	DBG("%s: %u rx descriptors refilled\n", ag->dev->name, count);
 
 	return count;
 }
@@ -610,7 +608,7 @@ void ag71xx_link_adjust(struct ag71xx *a
 			ag71xx_speed_str(ag),
 			(DUPLEX_FULL == ag->duplex) ? "Full" : "Half");
 
-	DBG("%s: fifo_cfg0=%#x, fifo_cfg1=%#x, fifo_cfg2=%#x\n",
+/*	DBG("%s: fifo_cfg0=%#x, fifo_cfg1=%#x, fifo_cfg2=%#x\n",
 		ag->dev->name,
 		ag71xx_rr(ag, AG71XX_REG_FIFO_CFG0),
 		ag71xx_rr(ag, AG71XX_REG_FIFO_CFG1),
@@ -625,7 +623,7 @@ void ag71xx_link_adjust(struct ag71xx *a
 	DBG("%s: mac_cfg2=%#x, mac_ifctl=%#x\n",
 		ag->dev->name,
 		ag71xx_rr(ag, AG71XX_REG_MAC_CFG2),
-		ag71xx_rr(ag, AG71XX_REG_MAC_IFCTL));
+		ag71xx_rr(ag, AG71XX_REG_MAC_IFCTL));*/
 }
 
 static int ag71xx_open(struct net_device *dev)
@@ -747,7 +745,7 @@ static netdev_tx_t ag71xx_hard_start_xmi
 		ag71xx_add_ar8216_header(ag, skb);
 
 	if (skb->len <= 4) {
-		DBG("%s: packet len is too small\n", ag->dev->name);
+//		DBG("%s: packet len is too small\n", ag->dev->name);
 		goto err_drop;
 	}
 
@@ -816,11 +814,11 @@ static netdev_tx_t ag71xx_hard_start_xmi
 	    ring_min *= AG71XX_TX_RING_DS_PER_PKT;
 
 	if (ring->curr - ring->dirty >= ring_size - ring_min) {
-		DBG("%s: tx queue full\n", dev->name);
+//		DBG("%s: tx queue full\n", dev->name);
 		netif_stop_queue(dev);
 	}
 
-	DBG("%s: packet injected into TX queue\n", ag->dev->name);
+//	DBG("%s: packet injected into TX queue\n", ag->dev->name);
 
 	/* enable TX engine */
 	ag71xx_wr(ag, AG71XX_REG_TX_CTRL, TX_CTRL_TXE);
@@ -902,7 +900,7 @@ static int ag71xx_tx_packets(struct ag71
 	int bytes_compl = 0;
 	int n = 0;
 
-	DBG("%s: processing TX ring\n", ag->dev->name);
+//	DBG("%s: processing TX ring\n", ag->dev->name);
 
 	while (ring->dirty + n != ring->curr) {
 		unsigned int i = (ring->dirty + n) % ring->size;
@@ -934,7 +932,7 @@ static int ag71xx_tx_packets(struct ag71
 		}
 	}
 
-	DBG("%s: %d packets sent out\n", ag->dev->name, sent);
+//	DBG("%s: %d packets sent out\n", ag->dev->name, sent);
 
 	ag->dev->stats.tx_bytes += bytes_compl;
 	ag->dev->stats.tx_packets += sent;
@@ -957,8 +955,8 @@ static int ag71xx_rx_packets(struct ag71
 	unsigned int pktlen_mask = ag->desc_pktlen_mask;
 	int done = 0;
 
-	DBG("%s: rx packets, limit=%d, curr=%u, dirty=%u\n",
-			dev->name, limit, ring->curr, ring->dirty);
+//	DBG("%s: rx packets, limit=%d, curr=%u, dirty=%u\n",
+//			dev->name, limit, ring->curr, ring->dirty);
 
 	while (done < limit) {
 		unsigned int i = ring->curr % ring->size;
@@ -1014,8 +1012,8 @@ next:
 
 	ag71xx_ring_rx_refill(ag);
 
-	DBG("%s: rx finish, curr=%u, dirty=%u, done=%d\n",
-		dev->name, ring->curr, ring->dirty, done);
+//	DBG("%s: rx finish, curr=%u, dirty=%u, done=%d\n",
+//		dev->name, ring->curr, ring->dirty, done);
 
 	return done;
 }
@@ -1034,7 +1032,7 @@ static int ag71xx_poll(struct napi_struc
 	pdata->ddr_flush();
 	tx_done = ag71xx_tx_packets(ag, false);
 
-	DBG("%s: processing RX ring\n", dev->name);
+//	DBG("%s: processing RX ring\n", dev->name);
 	rx_done = ag71xx_rx_packets(ag, limit);
 
 	ag71xx_debugfs_update_napi_stats(ag, rx_done, tx_done);
@@ -1060,8 +1058,8 @@ static int ag71xx_poll(struct napi_struc
 		if (status & TX_STATUS_PS)
 			goto more;
 
-		DBG("%s: disable polling mode, rx=%d, tx=%d,limit=%d\n",
-			dev->name, rx_done, tx_done, limit);
+//		DBG("%s: disable polling mode, rx=%d, tx=%d,limit=%d\n",
+//			dev->name, rx_done, tx_done, limit);
 
 		napi_complete(napi);
 
@@ -1073,8 +1071,8 @@ static int ag71xx_poll(struct napi_struc
 	}
 
 more:
-	DBG("%s: stay in polling mode, rx=%d, tx=%d, limit=%d\n",
-			dev->name, rx_done, tx_done, limit);
+//	DBG("%s: stay in polling mode, rx=%d, tx=%d, limit=%d\n",
+//			dev->name, rx_done, tx_done, limit);
 	return limit;
 
 oom:
@@ -1111,7 +1109,7 @@ static irqreturn_t ag71xx_interrupt(int
 
 	if (likely(status & AG71XX_INT_POLL)) {
 		ag71xx_int_disable(ag, AG71XX_INT_POLL);
-		DBG("%s: enable polling mode\n", dev->name);
+//		DBG("%s: enable polling mode\n", dev->name);
 		napi_schedule(&ag->napi);
 	}
 
