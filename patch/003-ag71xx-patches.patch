--- /dev/null	2014-11-12 20:17:52.826310856 +0800
+++ ./target/linux/ar71xx/patches-4.4/905-QCA-ag71xx-no-op-for-debug-all-optimization-levels.patch	2014-11-12 23:49:30.552690160 +0800
@@ -0,0 +1,31 @@
+From 11c3f6fc6b0f772df7abe75467615208e5f37672 Mon Sep 17 00:00:00 2001
+From: Ben Menchaca <ben.menchaca@qca.qualcomm.com>
+Date: Fri, 7 Jun 2013 11:20:00 -0500
+Subject: [ag71xx] no-op for debug all optimization levels
+
+Debug code was still generating instructions at some debug levels; this
+change ensures that no debug code is needlessly generated with debug
+disabled.
+
+--- ./drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c	2014-11-12 22:03:44.000000000 +0800
++++ ./drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c	2014-11-12 23:47:08.930270878 +0800
+@@ -35,6 +35,7 @@ static inline unsigned int ag71xx_max_fr
+ 	return ETH_SWITCH_HEADER_LEN + ETH_HLEN + VLAN_HLEN + mtu + ETH_FCS_LEN;
+ }
+ 
++#ifdef DEBUG
+ static void ag71xx_dump_dma_regs(struct ag71xx *ag)
+ {
+ 	DBG("%s: dma_tx_ctrl=%08x, dma_tx_desc=%08x, dma_tx_status=%08x\n",
+@@ -87,6 +88,11 @@ static inline void ag71xx_dump_intr(stru
+ 		(intr & AG71XX_INT_RX_OF) ? "RXOF " : "",
+ 		(intr & AG71XX_INT_RX_BE) ? "RXBE " : "");
+ }
++#else /* !DEBUG */
++#define ag71xx_dump_dma_regs(__ag)
++#define ag71xx_dump_regs(__ag)
++#define ag71xx_dump_intr(__ag, __label, __intr)
++#endif /* DEBUG */
+ 
+ static void ag71xx_ring_free(struct ag71xx_ring *ring)
+ {
--- /dev/null	2014-11-12 20:17:52.826310856 +0800
+++ ./target/linux/ar71xx/patches-4.4/908-QCA-reduce-napi-weight.patch	2014-11-13 00:58:19.005114565 +0800
@@ -0,0 +1,11 @@
+--- ./drivers/net/ethernet/atheros/ag71xx/ag71xx.h	2014-11-12 23:56:42.000000000 +0800
++++ ./drivers/net/ethernet/atheros/ag71xx/ag71xx.h	2014-11-13 00:06:28.542893466 +0800
+@@ -40,7 +40,7 @@
+ #define AG71XX_DRV_NAME		"ag71xx"
+ #define AG71XX_DRV_VERSION	"0.5.35"
+ 
+-#define AG71XX_NAPI_WEIGHT	64
++#define AG71XX_NAPI_WEIGHT	32
+ #define AG71XX_OOM_REFILL	(1 + HZ/10)
+ 
+ #define AG71XX_INT_ERR	(AG71XX_INT_RX_BE | AG71XX_INT_TX_BE)
--- /dev/null	2014-11-12 20:17:52.826310856 +0800
+++ ./target/linux/ar71xx/patches-4.4/909-QCA-ag71xx-cluster-align-structs-for-cache-perf.patch	2014-11-13 19:35:46.824308862 +0800
@@ -0,0 +1,28 @@
+--- ./drivers/net/ethernet/atheros/ag71xx/ag71xx.h	2014-11-13 01:27:47.000000000 +0800
++++ ./drivers/net/ethernet/atheros/ag71xx/ag71xx.h	2014-11-13 19:30:56.672351397 +0800
+@@ -147,20 +147,19 @@ struct ag71xx_debug {
+ };
+ 
+ struct ag71xx {
+-	void __iomem		*mac_base;
++	struct ag71xx_ring	rx_ring ____cacheline_aligned;
++	struct ag71xx_ring	tx_ring ____cacheline_aligned;
+ 
+-	spinlock_t		lock;
+-	struct platform_device	*pdev;
+ 	struct net_device	*dev;
++	struct platform_device	*pdev;
++	spinlock_t		lock;
+ 	struct napi_struct	napi;
++	void __iomem		*mac_base;
+ 	u32			msg_enable;
+ 
+ 	struct ag71xx_desc	*stop_desc;
+ 	dma_addr_t		stop_desc_dma;
+ 
+-	struct ag71xx_ring	rx_ring;
+-	struct ag71xx_ring	tx_ring;
+-
+ 	struct mii_bus		*mii_bus;
+ 	struct phy_device	*phy_dev;
+ 	void			*phy_priv;
--- /dev/null	2014-11-12 20:17:52.826310856 +0800
+++ ./target/linux/ar71xx/patches-4.4/918-QCA-netdev-inline-kfree_skbmem.patch	2014-11-13 19:36:21.247597312 +0800
@@ -0,0 +1,11 @@
+--- ./net/core/skbuff.c.orig	2014-11-13 01:27:35.000000000 +0800
++++ ./net/core/skbuff.c	2014-11-13 19:18:11.929854160 +0800
+@@ -530,7 +530,7 @@ static void skb_release_data(struct sk_b
+ /*
+  *	Free an skbuff by memory without cleaning the state.
+  */
+-static void kfree_skbmem(struct sk_buff *skb)
++static inline void kfree_skbmem(struct sk_buff *skb)
+ {
+ 	struct sk_buff *other;
+ 	atomic_t *fclone_ref;
--- /dev/null	2014-11-17 21:04:29.341198900 +0800
+++ ./target/linux/ar71xx/patches-4.4/903-QCA-ar71xx-efficient-cache-blast.patch	2014-11-17 23:07:44.779484803 +0800
@@ -0,0 +1,69 @@
+From 4f6fcee5deca31e059c73dcfd912d975e91d8c59 Mon Sep 17 00:00:00 2001
+From: Ben Menchaca <ben.menchaca@qca.qualcomm.com>
+Date: Fri, 7 Jun 2013 18:35:22 -0500
+Subject: [r4k_mips] efficient cache blast
+
+Optimize the compiler output for larger cache blast cases that are
+common for DMA-based networking.
+
+Signed-off-by: Ben Menchaca <ben.menchaca@qca.qualcomm.com>
+---
+ arch/mips/include/asm/r4kcache.h | 42 +++++++++++++++++++++++++++++++++++-----
+ 1 file changed, 37 insertions(+), 5 deletions(-)
+
+--- a/arch/mips/include/asm/r4kcache.h
++++ b/arch/mips/include/asm/r4kcache.h
+@@ -435,16 +435,48 @@ static inline void prot##extra##blast_##
+ 						    unsigned long end)	\
+ {									\
+ 	unsigned long lsize = cpu_##desc##_line_size();			\
++	unsigned long lsize_2 = lsize * 2;				\
++	unsigned long lsize_3 = lsize * 3;				\
++	unsigned long lsize_4 = lsize * 4;				\
++	unsigned long lsize_5 = lsize * 5;				\
++	unsigned long lsize_6 = lsize * 6;				\
++	unsigned long lsize_7 = lsize * 7;				\
++	unsigned long lsize_8 = lsize * 8;				\
+ 	unsigned long addr = start & ~(lsize - 1);			\
+-	unsigned long aend = (end - 1) & ~(lsize - 1);			\
++	unsigned long aend = (end + lsize - 1) & ~(lsize - 1);		\
++	int lines = (aend - addr) / lsize;				\
+ 									\
+ 	__##pfx##flush_prologue						\
+ 									\
+-	while (1) {							\
++	while (lines >= 8) {						\
++		prot##cache_op(hitop, addr);				\
++		prot##cache_op(hitop, addr + lsize);			\
++		prot##cache_op(hitop, addr + lsize_2);			\
++		prot##cache_op(hitop, addr + lsize_3);			\
++		prot##cache_op(hitop, addr + lsize_4);			\
++		prot##cache_op(hitop, addr + lsize_5);			\
++		prot##cache_op(hitop, addr + lsize_6);			\
++		prot##cache_op(hitop, addr + lsize_7);			\
++		addr += lsize_8;					\
++		lines -= 8;						\
++	}								\
++									\
++	if (lines & 0x4) {						\
++		prot##cache_op(hitop, addr);				\
++		prot##cache_op(hitop, addr + lsize);			\
++		prot##cache_op(hitop, addr + lsize_2);			\
++		prot##cache_op(hitop, addr + lsize_3);			\
++		addr += lsize_4;					\
++	}								\
++									\
++	if (lines & 0x2) {						\
++		prot##cache_op(hitop, addr);				\
++		prot##cache_op(hitop, addr + lsize);			\
++		addr += lsize_2;					\
++	}								\
++									\
++	if (lines & 0x1) {						\
+ 		prot##cache_op(hitop, addr);				\
+-		if (addr == aend)					\
+-			break;						\
+-		addr += lsize;						\
+ 	}								\
+ 									\
+ 	__##pfx##flush_epilogue						\
--- /dev/null
+++ b/target/linux/ar71xx/patches-4.4/926-ag71xx-DMA-unmap-from-device-no-op-for-mips-arch.patch
@@ -0,0 +1,40 @@
+--- a/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
++++ b/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
+@@ -206,8 +206,6 @@ static void ag71xx_ring_rx_clean(struct ag71xx *ag)
+ 
+ 	for (i = 0; i < ring_size; i++)
+ 		if (ring->buf[i].rx_buf) {
+-			dma_unmap_single(&ag->dev->dev, ring->buf[i].dma_addr,
+-					 ag->rx_buf_size, DMA_FROM_DEVICE);
+ 			skb_free_frag(ring->buf[i].rx_buf);
+ 		}
+ }
+@@ -814,8 +812,6 @@ static netdev_tx_t ag71xx_hard_start_xmit(struct sk_buff *skb,
+ 
+ 	/* setup descriptor fields */
+ 	n = ag71xx_fill_dma_desc(ring, (u32) dma_addr, skb->len & ag->desc_pktlen_mask);
+-	if (n < 0)
+-		goto err_drop_unmap;
+ 
+ 	i = (ring->curr + n - 1) & ring_mask;
+ 	ring->buf[i].len = skb->len;
+@@ -848,9 +844,6 @@ static netdev_tx_t ag71xx_hard_start_xmit(struct sk_buff *skb,
+ 
+ 	return NETDEV_TX_OK;
+ 
+-err_drop_unmap:
+-	dma_unmap_single(&dev->dev, dma_addr, skb->len, DMA_TO_DEVICE);
+-
+ err_drop:
+ 	dev->stats.tx_dropped++;
+ 
+@@ -1055,9 +1048,6 @@ static int ag71xx_rx_packets(struct ag71xx *ag, int limit)
+ 		pktlen = desc->ctrl & pktlen_mask;
+ 		pktlen -= ETH_FCS_LEN;
+ 
+-		dma_unmap_single(&dev->dev, ring->buf[i].dma_addr,
+-				 ag->rx_buf_size, DMA_FROM_DEVICE);
+-
+ 		dev->stats.rx_packets++;
+ 		dev->stats.rx_bytes += pktlen;
+ 
